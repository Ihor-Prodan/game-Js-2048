{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,C,C,C,C,C,C,C,C,C,C,C,C,E,G,C,I,E,C,C,E,C,G,E,E,K,A,C,M,E,C,E,G,M,C,E,I,C,E,G,Q,O,C,G,I,C,E,E,C,S,E,C,C,C,E,G,C,C,a,C,E,M,A,U,oC,C,S,E,C,C,C,E,I,I,E,E,E,E,M,C,I,C,I,E,C,C,E,A,C,E,U,C,E,U,E,C,E,E,Y,C,C,E,U,G,C,E,Q,C,C,C,E,O,c,C,E,E,G,C,E,C,C,S,E,C,C,C,C,C,E,O,G,E,E,S,C,G,G,E,E,G,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCKA,IAAI,EAAQ,EACN,EAAe,SAAS,cAAc,CAAC,cACvC,EAAe,SAAS,cAAc,CAAC,iBACvC,EAAc,SAAS,cAAc,CAAC,gBACtC,EAAa,SAAS,cAAc,CAAC,eAErC,EAAc,SAAS,cAAc,CAAC,gBAEtC,EAAY,SAAS,cAAc,CAAC,cAEtC,EAAU,CAAA,EAER,EAAN,WAAM,SAAA,EACQ,CAAW,EADnB,EAAA,IAAA,CAAA,GAEF,EAAY,KAAK,CAAC,WAAW,CAAC,cAlBhB,GAmBd,EAAY,KAAK,CAAC,WAAW,CAAC,cAAgB,GAAY,MAAA,CAlB5C,GAkB4C,OAC1D,EAAY,KAAK,CAAC,WAAW,CAAC,aAAe,GAAW,MAAA,CAlB3C,EAkB2C,OAExD,IAAI,CAAC,MAAM,CAAG,AAgHlB,CAAA,SAA4B,CAAW,EAGrC,IAAK,IAFC,EAAQ,EAAE,CAEP,EAAI,EAAG,EAAI,GAAuB,IAAK,CAC9C,IAAM,EAAO,SAAS,aAAa,CAAC,OAEpC,EAAK,SAAS,CAAC,GAAG,CAAC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AM,CAAC,iBAC7B,EAAY,SAAS,CAAC,GAAG,CAAC,mBAC1B,EAAY,WAAW,CAAG,IAE1B,EAAY,SAAS,CAAC,GAAG,CAAC,mBAC1B,EAAa,SAAS,CAAC,GAAG,CAAC,mBAC3B,EAAW,SAAS,CAAC,GAAG,CAAC,mBAjBzB,EAAK,KAAK,CAAC,OAAO,CAAC,SAAC,CAApB,EACmB,MAAb,EAAK,IAAI,GACX,EAAK,IAAI,CAAC,MAAM,GAChB,EAAK,IAAI,CAAG,KAEhB,GAgBA,EAAK,eAAe,GAAG,IAAI,CAAG,IAAI,EAAK,GACvC,EAAK,eAAe,GAAG,IAAI,CAAG,IAAI,EAAK,GACvC,EAAU,CAAA,EACV,GACF,GA7LA,IAAM,EAAO,IAAI,EAAK,GAEtB,SAAS,IACP,OAAO,gBAAgB,CAAC,UAAW,EAAa,CAAE,KAAM,CAAA,CAAK,EAC/D,CAEe,SAAA,EAAY,CAAC,EAAb,OAAA,EAAA,KAAA,CAAA,IAAA,CAAA,U,CAAA,SAAA,Q,EAAA,O,EAAf,SAA2B,CAAC,EAKtB,IAAA,EAmCI,E,O,A,S,C,C,C,E,I,E,E,E,E,E,C,M,E,K,W,G,A,E,C,C,E,C,M,C,C,E,C,O,C,C,E,A,E,K,E,C,I,E,A,E,O,E,C,K,E,G,M,E,G,O,E,E,E,A,Y,O,Q,C,C,C,O,Q,C,C,W,O,I,A,C,E,E,S,E,C,E,O,S,C,E,O,A,S,C,E,G,E,M,A,U,mC,K,G,G,C,G,E,E,G,C,E,A,E,C,C,E,C,E,M,C,C,C,E,C,E,K,E,C,A,C,E,E,M,A,G,E,I,C,G,C,E,E,I,A,G,C,A,C,E,E,I,C,E,C,C,E,C,E,I,C,O,E,O,E,E,A,G,C,E,C,A,E,C,C,E,C,E,K,C,A,E,C,C,E,E,K,E,K,E,E,E,K,M,E,O,E,K,G,C,M,C,C,E,C,K,C,C,C,M,E,E,K,G,E,C,C,E,C,E,C,E,C,Q,M,E,E,E,G,C,G,G,E,I,C,G,G,Q,S,G,C,C,E,A,C,E,E,I,A,E,M,C,G,C,C,E,M,C,E,A,G,C,A,I,C,C,E,E,A,I,C,C,E,A,E,C,E,E,Q,C,G,A,I,C,C,E,E,C,C,G,C,C,E,C,C,C,E,E,C,C,E,C,C,C,E,A,E,C,E,K,C,C,C,E,C,K,C,G,A,I,C,C,E,E,E,K,C,C,C,E,C,C,E,K,C,C,C,E,C,E,E,K,C,G,G,E,K,C,C,C,E,C,C,E,K,C,C,C,E,C,E,G,C,I,C,G,K,C,C,C,E,E,E,G,C,G,G,E,I,C,G,G,Q,C,E,E,I,C,E,E,C,M,E,C,E,C,E,E,C,E,C,Q,C,E,E,C,C,G,A,E,C,C,E,C,M,C,C,E,C,M,C,M,C,C,E,C,C,C,E,C,K,E,K,C,C,C,E,C,E,E,C,C,C,E,I,C,S,C,E,O,E,K,E,K,EAvCR,GAAI,EACF,MADF,C,E,CAMA,OAAQ,EAAE,GAAG,EACX,IAAK,UACH,EAAe,EACf,KACF,KAAK,YACH,EAAe,EACf,KACF,KAAK,YACH,EAAe,EACf,KACF,KAAK,aACH,EAAe,EACf,KACF,SACE,EAAe,IACnB,CAEI,GAAA,CAAA,EAAA,MAAA,C,E,E,CACF,GAAI,CAAC,IAGH,OAFA,IAEA,C,E,CAEF,MAAA,C,EAAM,I,A,M,E,OAAN,EAAA,IAAA,G,C,E,E,A,M,EAIA,OAFA,IAEA,C,E,A,M,EAKF,GAFA,EAAK,KAAK,CAAC,OAAO,CAAC,SAAC,CAApB,EAA6B,OAAA,EAAK,UAAU,E,GAExC,EAAK,WAAW,CAAC,MAAM,GACnB,EAAU,IAAI,EAAK,GAEzB,EAAK,eAAe,GAAG,IAAI,CAAG,EAE1B,CAoEC,EAAQ,EAAK,aAAa,GApEX,CAwEf,EAAQ,EAAK,aAAa,CAAC,GAAG,CAAC,SAAC,CAAvC,EAAkD,OAAC,EAAG,GAAQ,OAAO,E,KAxE7B,CA4EjC,EAAQ,EAAK,UAAU,GA5E4B,CAgFnD,EAAQ,EAAK,UAAU,CAAC,GAAG,CAAC,SAAC,CAApC,EAA4C,OAAC,EAAG,GAAK,OAAO,E,KA7ExD,OAFA,EAAQ,iBAAiB,CAAC,CAAA,GAAM,IAAI,CAAC,WAyJzC,EAAY,SAAS,CAAC,MAAM,CAAC,mBAC7B,EAAY,WAAW,CAAG,S,GAxJtB,C,E,C,OAIJ,I,C,E,A,C,EACF,EApDe,AAAA,CAAA,E,W,I,E,I,C,E,U,O,I,Q,S,C,C,C,E,I,E,E,K,C,E,G,S,E,C,E,E,E,E,E,E,E,O,E,C,S,E,C,E,E,E,E,E,E,E,Q,E,C,E,K,E,E,CAoDf,EApDe,KAAA,CAAA,IAAA,CAAA,U,CAsDf,SAAS,IACP,OAAO,EAAW,EAAK,aAAa,CACtC,CAEA,SAAS,IACP,OAAO,EAAW,EAAK,aAAa,CAAC,GAAG,CAAC,SAAC,CAA1C,EAAqD,OAAC,EAAG,GAAQ,OAAO,E,GAC1E,CAEA,SAAS,IACP,OAAO,EAAW,EAAK,UAAU,CACnC,CAEA,SAAS,IACP,OAAO,EAAW,EAAK,UAAU,CAAC,GAAG,CAAC,SAAC,CAAvC,EAA+C,OAAC,EAAG,GAAK,OAAO,E,GACjE,CAEA,SAAS,EAAW,CAAK,EACvB,OAAO,QAAQ,GAAG,CAChB,EAAM,OAAO,CAAC,SAAC,CADjB,EAII,IAAK,IAFC,EAAW,EAAE,CAEV,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAAK,CACrC,IAAM,EAAO,CAAK,CAAC,EAAE,CAErB,GAAI,AAAa,MAAb,EAAK,IAAI,EAMb,IAAK,IAFD,EAAA,KAAA,EAEK,EAAI,EAAI,EAAG,GAAK,EAAG,IAAK,CAC/B,IAAM,EAAa,CAAK,CAAC,EAAE,CAE3B,GAAI,CAAC,EAAW,SAAS,CAAC,EAAK,IAAI,EACjC,MAGF,EAAgB,CAClB,CAEqB,MAAjB,IACF,EAAS,IAAI,CAAC,EAAK,IAAI,CAAC,iBAAiB,IAErC,AAAsB,MAAtB,EAAc,IAAI,CACpB,EAAc,SAAS,CAAG,EAAK,IAAI,CAEnC,EAAc,IAAI,CAAG,EAAK,IAAI,CAEhC,EAAK,IAAI,CAAG,MAEhB,CAEA,OAAO,CACT,GAEJ,CAkBA,SAAS,EAAQ,CAAK,EACpB,OAAO,EAAM,IAAI,CAAC,SAAC,CAAnB,EACE,OAAO,EAAM,IAAI,CAAC,SAAC,CAAA,CAAM,CAAzB,SACE,AAAc,IAAV,GAIA,AAAa,MAAb,EAAK,IAAI,EAMN,AAFY,CAAK,CAAC,EAAQ,EAAE,CAEjB,SAAS,CAAC,EAAK,IAAI,CACvC,EACF,EACF,CAEA,SAAS,IACP,EAAa,WAAW,CAAG,CAC7B","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nfunction _ts_generator(thisArg, body) {\n    var f, y, t, g, _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    };\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nvar WINNING_VALUE = 2048;\nvar GRID_SIZE = 4;\nvar CELL_SIZE = 75;\nvar CELL_GAP = 5;\nvar score = 0;\nvar scoreElement = document.getElementById(\"game-score\");\nvar startMessage = document.getElementById(\"message-start\");\nvar loseMessage = document.getElementById(\"message-lose\");\nvar winMessage = document.getElementById(\"message-win\");\nvar startButton = document.getElementById(\"button-start\");\nvar gameBoard = document.getElementById(\"game-board\");\nvar gameWon = false;\nvar Game = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Game(gridElement) {\n        _class_call_check(this, Game);\n        gridElement.style.setProperty(\"--grid-size\", GRID_SIZE);\n        gridElement.style.setProperty(\"--cell-size\", \"\".concat(CELL_SIZE, \"px\"));\n        gridElement.style.setProperty(\"--gap-size\", \"\".concat(CELL_GAP, \"px\"));\n        this._cells = createCellElements(gridElement).map(function(cellElement, index) {\n            return new Cell(cellElement, index % GRID_SIZE, Math.floor(index / GRID_SIZE));\n        });\n    }\n    _create_class(Game, [\n        {\n            key: \"cells\",\n            get: function get() {\n                return this._cells;\n            }\n        },\n        {\n            key: \"cellsByColumn\",\n            get: function get() {\n                return this._cells.reduce(function(cellGrid, cell) {\n                    cellGrid[cell.x] = cellGrid[cell.x] || [];\n                    cellGrid[cell.x][cell.y] = cell;\n                    return cellGrid;\n                }, []);\n            }\n        },\n        {\n            key: \"cellsByRow\",\n            get: function get() {\n                return this._cells.reduce(function(cellGrid, cell) {\n                    cellGrid[cell.y] = cellGrid[cell.y] || [];\n                    cellGrid[cell.y][cell.x] = cell;\n                    return cellGrid;\n                }, []);\n            }\n        },\n        {\n            key: \"_emptyCells\",\n            get: function get() {\n                return this._cells.filter(function(cell) {\n                    return cell.tile == null;\n                });\n            }\n        },\n        {\n            key: \"randomEmptyCell\",\n            value: function randomEmptyCell() {\n                var randomIndex = Math.floor(Math.random() * this._emptyCells.length);\n                return this._emptyCells[randomIndex];\n            }\n        }\n    ]);\n    return Game;\n}();\nvar Cell = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Cell(cellElement, x, y) {\n        _class_call_check(this, Cell);\n        this._cellElement = cellElement;\n        this._x = x;\n        this._y = y;\n    }\n    _create_class(Cell, [\n        {\n            key: \"x\",\n            get: function get() {\n                return this._x;\n            }\n        },\n        {\n            key: \"y\",\n            get: function get() {\n                return this._y;\n            }\n        },\n        {\n            key: \"tile\",\n            get: function get() {\n                return this._tile;\n            },\n            set: function set(value) {\n                this._tile = value;\n                if (value == null) return;\n                this._tile.x = this._x;\n                this._tile.y = this._y;\n            }\n        },\n        {\n            key: \"mergeTile\",\n            get: function get() {\n                return this._mergeTile;\n            },\n            set: function set(value) {\n                this._mergeTile = value;\n                if (value == null) return;\n                this._mergeTile.x = this._x;\n                this._mergeTile.y = this._y;\n            }\n        },\n        {\n            key: \"canAccept\",\n            value: function canAccept(tile) {\n                return this.tile == null || this.mergeTile == null && this.tile.value === tile.value;\n            }\n        },\n        {\n            key: \"mergeTiles\",\n            value: function mergeTiles() {\n                if (this.tile == null || this.mergeTile == null) return;\n                score += this.tile.value;\n                this.tile.value = this.tile.value + this.mergeTile.value;\n                updateScore();\n                this.mergeTile.remove();\n                this.mergeTile = null;\n                if (this.tile.value === WINNING_VALUE) winGame();\n            }\n        }\n    ]);\n    return Cell;\n}();\nfunction createCellElements(gridElement) {\n    var cells = [];\n    for(var i = 0; i < GRID_SIZE * GRID_SIZE; i++){\n        var cell = document.createElement(\"div\");\n        cell.classList.add(\"cell\");\n        cells.push(cell);\n        gridElement.append(cell);\n    }\n    return cells;\n}\nvar Tile = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Tile(tileContainer) {\n        var value = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Math.random() > 0.1 ? 2 : 4;\n        _class_call_check(this, Tile);\n        this._tileElement = document.createElement(\"div\");\n        this._tileElement.classList.add(\"tile\");\n        tileContainer.append(this._tileElement);\n        this.value = value;\n    }\n    _create_class(Tile, [\n        {\n            key: \"value\",\n            get: function get() {\n                return this._value;\n            },\n            set: function set(v) {\n                this._value = v;\n                this._tileElement.textContent = v;\n                this._tileElement.classList.add(\"tile--\".concat(this._value));\n            }\n        },\n        {\n            key: \"x\",\n            get: function get() {\n                return this._x;\n            },\n            set: function set(value) {\n                this._x = value;\n                this._tileElement.style.setProperty(\"--x\", value);\n            }\n        },\n        {\n            key: \"y\",\n            get: function get() {\n                return this._y;\n            },\n            set: function set(value) {\n                this._y = value;\n                this._tileElement.style.setProperty(\"--y\", value);\n            }\n        },\n        {\n            key: \"remove\",\n            value: function remove() {\n                this._tileElement.remove();\n            }\n        },\n        {\n            key: \"waitForTransition\",\n            value: function waitForTransition() {\n                var animation = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n                var _this = this;\n                return new Promise(function(resolve) {\n                    _this._tileElement.addEventListener(animation ? \"animationend\" : \"transitionend\", resolve, {\n                        once: true\n                    });\n                });\n            }\n        }\n    ]);\n    return Tile;\n}();\nstartButton.addEventListener(\"click\", startGame);\nvar grid = new Game(gameBoard);\nfunction setupInput() {\n    window.addEventListener(\"keydown\", handleInput, {\n        once: true\n    });\n}\nfunction handleInput(e) {\n    return _handleInput.apply(this, arguments);\n}\nfunction _handleInput() {\n    _handleInput = _async_to_generator(function(e) {\n        var moveFunction, newTile;\n        return _ts_generator(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    if (gameWon) return [\n                        2\n                    ];\n                    switch(e.key){\n                        case \"ArrowUp\":\n                            moveFunction = moveUp;\n                            break;\n                        case \"ArrowDown\":\n                            moveFunction = moveDown;\n                            break;\n                        case \"ArrowLeft\":\n                            moveFunction = moveLeft;\n                            break;\n                        case \"ArrowRight\":\n                            moveFunction = moveRight;\n                            break;\n                        default:\n                            moveFunction = null;\n                    }\n                    if (!moveFunction) return [\n                        3,\n                        2\n                    ];\n                    if (!moveFunction()) {\n                        setupInput();\n                        return [\n                            2\n                        ];\n                    }\n                    return [\n                        4,\n                        moveFunction()\n                    ];\n                case 1:\n                    _state.sent();\n                    return [\n                        3,\n                        3\n                    ];\n                case 2:\n                    setupInput();\n                    return [\n                        2\n                    ];\n                case 3:\n                    grid.cells.forEach(function(cell) {\n                        return cell.mergeTiles();\n                    });\n                    if (grid._emptyCells.length) {\n                        newTile = new Tile(gameBoard);\n                        grid.randomEmptyCell().tile = newTile;\n                        if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n                            newTile.waitForTransition(true).then(function() {\n                                return loseGame();\n                            });\n                            return [\n                                2\n                            ];\n                        }\n                    }\n                    setupInput();\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return _handleInput.apply(this, arguments);\n}\nfunction moveUp() {\n    return slideTiles(grid.cellsByColumn);\n}\nfunction moveDown() {\n    return slideTiles(grid.cellsByColumn.map(function(column) {\n        return _to_consumable_array(column).reverse();\n    }));\n}\nfunction moveLeft() {\n    return slideTiles(grid.cellsByRow);\n}\nfunction moveRight() {\n    return slideTiles(grid.cellsByRow.map(function(row) {\n        return _to_consumable_array(row).reverse();\n    }));\n}\nfunction slideTiles(cells) {\n    return Promise.all(cells.flatMap(function(group) {\n        var promises = [];\n        for(var i = 0; i < group.length; i++){\n            var cell = group[i];\n            if (cell.tile == null) continue;\n            var lastValidCell = void 0;\n            for(var j = i - 1; j >= 0; j--){\n                var moveToCell = group[j];\n                if (!moveToCell.canAccept(cell.tile)) break;\n                lastValidCell = moveToCell;\n            }\n            if (lastValidCell != null) {\n                promises.push(cell.tile.waitForTransition());\n                if (lastValidCell.tile != null) lastValidCell.mergeTile = cell.tile;\n                else lastValidCell.tile = cell.tile;\n                cell.tile = null;\n            }\n        }\n        return promises;\n    }));\n}\nfunction canMoveUp() {\n    return canMove(grid.cellsByColumn);\n}\nfunction canMoveDown() {\n    return canMove(grid.cellsByColumn.map(function(column) {\n        return _to_consumable_array(column).reverse();\n    }));\n}\nfunction canMoveLeft() {\n    return canMove(grid.cellsByRow);\n}\nfunction canMoveRight() {\n    return canMove(grid.cellsByRow.map(function(row) {\n        return _to_consumable_array(row).reverse();\n    }));\n}\nfunction canMove(cells) {\n    return cells.some(function(group) {\n        return group.some(function(cell, index) {\n            if (index === 0) return false;\n            if (cell.tile == null) return false;\n            var moveToCell = group[index - 1];\n            return moveToCell.canAccept(cell.tile);\n        });\n    });\n}\nfunction updateScore() {\n    scoreElement.textContent = score;\n}\nfunction resetGame() {\n    score = 0;\n    updateScore();\n    setupInput();\n}\nfunction clearBoard() {\n    grid.cells.forEach(function(cell) {\n        if (cell.tile != null) {\n            cell.tile.remove();\n            cell.tile = null;\n        }\n    });\n}\nfunction startGame() {\n    resetGame();\n    startButton.classList.remove(\"button--start\");\n    startButton.classList.add(\"button--restart\");\n    startButton.textContent = \"\\u21BB\";\n    loseMessage.classList.add(\"message--hidden\");\n    startMessage.classList.add(\"message--hidden\");\n    winMessage.classList.add(\"message--hidden\");\n    clearBoard();\n    grid.randomEmptyCell().tile = new Tile(gameBoard);\n    grid.randomEmptyCell().tile = new Tile(gameBoard);\n    gameWon = false;\n    setupInput();\n}\nfunction winGame() {\n    winMessage.classList.remove(\"message--hidden\");\n    startButton.classList.remove(\"button--restart\");\n    startButton.textContent = \"Start\";\n    startButton.classList.add(\"button--start\");\n    window.removeEventListener(\"keydown\", handleInput);\n    gameWon = true;\n}\nfunction loseGame() {\n    loseMessage.classList.remove(\"message--hidden\");\n    startButton.textContent = \"Restart\";\n}\n\n//# sourceMappingURL=index.9e948371.js.map\n","const WINNING_VALUE = 2048;\nconst GRID_SIZE = 4;\nconst CELL_SIZE = 75;\nconst CELL_GAP = 5;\n\nlet score = 0;\nconst scoreElement = document.getElementById('game-score');\nconst startMessage = document.getElementById('message-start');\nconst loseMessage = document.getElementById('message-lose');\nconst winMessage = document.getElementById('message-win');\n\nconst startButton = document.getElementById('button-start');\n\nconst gameBoard = document.getElementById('game-board');\n\nlet gameWon = false;\n\nclass Game {\n  constructor(gridElement) {\n    gridElement.style.setProperty('--grid-size', GRID_SIZE);\n    gridElement.style.setProperty('--cell-size', `${CELL_SIZE}px`);\n    gridElement.style.setProperty('--gap-size', `${CELL_GAP}px`);\n\n    this._cells = createCellElements(gridElement).map((cellElement, index) => {\n      return new Cell(\n        cellElement,\n        index % GRID_SIZE,\n        Math.floor(index / GRID_SIZE),\n      );\n    });\n  }\n\n  get cells() {\n    return this._cells;\n  }\n\n  get cellsByColumn() {\n    return this._cells.reduce((cellGrid, cell) => {\n      cellGrid[cell.x] = cellGrid[cell.x] || [];\n      cellGrid[cell.x][cell.y] = cell;\n\n      return cellGrid;\n    }, []);\n  }\n\n  get cellsByRow() {\n    return this._cells.reduce((cellGrid, cell) => {\n      cellGrid[cell.y] = cellGrid[cell.y] || [];\n      cellGrid[cell.y][cell.x] = cell;\n\n      return cellGrid;\n    }, []);\n  }\n\n  get _emptyCells() {\n    return this._cells.filter((cell) => cell.tile == null);\n  }\n\n  randomEmptyCell() {\n    const randomIndex = Math.floor(Math.random() * this._emptyCells.length);\n\n    return this._emptyCells[randomIndex];\n  }\n}\n\nclass Cell {\n  constructor(cellElement, x, y) {\n    this._cellElement = cellElement;\n    this._x = x;\n    this._y = y;\n  }\n\n  get x() {\n    return this._x;\n  }\n  get y() {\n    return this._y;\n  }\n\n  get tile() {\n    return this._tile;\n  }\n\n  set tile(value) {\n    this._tile = value;\n\n    if (value == null) {\n      return;\n    }\n\n    this._tile.x = this._x;\n    this._tile.y = this._y;\n  }\n\n  get mergeTile() {\n    return this._mergeTile;\n  }\n\n  set mergeTile(value) {\n    this._mergeTile = value;\n\n    if (value == null) {\n      return;\n    }\n\n    this._mergeTile.x = this._x;\n    this._mergeTile.y = this._y;\n  }\n\n  canAccept(tile) {\n    return (\n      this.tile == null ||\n      (this.mergeTile == null && this.tile.value === tile.value)\n    );\n  }\n\n  mergeTiles() {\n    if (this.tile == null || this.mergeTile == null) {\n      return;\n    }\n\n    score += this.tile.value;\n    this.tile.value = this.tile.value + this.mergeTile.value;\n\n    updateScore();\n\n    this.mergeTile.remove();\n    this.mergeTile = null;\n\n    if (this.tile.value === WINNING_VALUE) {\n      winGame();\n    }\n  }\n}\n\nfunction createCellElements(gridElement) {\n  const cells = [];\n\n  for (let i = 0; i < GRID_SIZE * GRID_SIZE; i++) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('cell');\n    cells.push(cell);\n    gridElement.append(cell);\n  }\n\n  return cells;\n}\n\nclass Tile {\n  constructor(tileContainer, value = Math.random() > 0.1 ? 2 : 4) {\n    this._tileElement = document.createElement('div');\n    this._tileElement.classList.add('tile');\n    tileContainer.append(this._tileElement);\n    this.value = value;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set x(value) {\n    this._x = value;\n    this._tileElement.style.setProperty('--x', value);\n  }\n\n  set y(value) {\n    this._y = value;\n    this._tileElement.style.setProperty('--y', value);\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  set value(v) {\n    this._value = v;\n    this._tileElement.textContent = v;\n    this._tileElement.classList.add(`tile--${this._value}`);\n  }\n\n  remove() {\n    this._tileElement.remove();\n  }\n\n  waitForTransition(animation = false) {\n    return new Promise((resolve) => {\n      this._tileElement.addEventListener(\n        animation ? 'animationend' : 'transitionend',\n        resolve,\n        { once: true },\n      );\n    });\n  }\n}\n\nstartButton.addEventListener('click', startGame);\n\nconst grid = new Game(gameBoard);\n\nfunction setupInput() {\n  window.addEventListener('keydown', handleInput, { once: true });\n}\n\nasync function handleInput(e) {\n  if (gameWon) {\n    return;\n  }\n\n  let moveFunction;\n\n  switch (e.key) {\n    case 'ArrowUp':\n      moveFunction = moveUp;\n      break;\n    case 'ArrowDown':\n      moveFunction = moveDown;\n      break;\n    case 'ArrowLeft':\n      moveFunction = moveLeft;\n      break;\n    case 'ArrowRight':\n      moveFunction = moveRight;\n      break;\n    default:\n      moveFunction = null;\n  }\n\n  if (moveFunction) {\n    if (!moveFunction()) {\n      setupInput();\n\n      return;\n    }\n    await moveFunction();\n  } else {\n    setupInput();\n\n    return;\n  }\n\n  grid.cells.forEach((cell) => cell.mergeTiles());\n\n  if (grid._emptyCells.length) {\n    const newTile = new Tile(gameBoard);\n\n    grid.randomEmptyCell().tile = newTile;\n\n    if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n      newTile.waitForTransition(true).then(() => loseGame());\n\n      return;\n    }\n  }\n\n  setupInput();\n}\n\nfunction moveUp() {\n  return slideTiles(grid.cellsByColumn);\n}\n\nfunction moveDown() {\n  return slideTiles(grid.cellsByColumn.map((column) => [...column].reverse()));\n}\n\nfunction moveLeft() {\n  return slideTiles(grid.cellsByRow);\n}\n\nfunction moveRight() {\n  return slideTiles(grid.cellsByRow.map((row) => [...row].reverse()));\n}\n\nfunction slideTiles(cells) {\n  return Promise.all(\n    cells.flatMap((group) => {\n      const promises = [];\n\n      for (let i = 0; i < group.length; i++) {\n        const cell = group[i];\n\n        if (cell.tile == null) {\n          continue;\n        }\n\n        let lastValidCell;\n\n        for (let j = i - 1; j >= 0; j--) {\n          const moveToCell = group[j];\n\n          if (!moveToCell.canAccept(cell.tile)) {\n            break;\n          }\n\n          lastValidCell = moveToCell;\n        }\n\n        if (lastValidCell != null) {\n          promises.push(cell.tile.waitForTransition());\n\n          if (lastValidCell.tile != null) {\n            lastValidCell.mergeTile = cell.tile;\n          } else {\n            lastValidCell.tile = cell.tile;\n          }\n          cell.tile = null;\n        }\n      }\n\n      return promises;\n    }),\n  );\n}\n\nfunction canMoveUp() {\n  return canMove(grid.cellsByColumn);\n}\n\nfunction canMoveDown() {\n  return canMove(grid.cellsByColumn.map((column) => [...column].reverse()));\n}\n\nfunction canMoveLeft() {\n  return canMove(grid.cellsByRow);\n}\n\nfunction canMoveRight() {\n  return canMove(grid.cellsByRow.map((row) => [...row].reverse()));\n}\n\nfunction canMove(cells) {\n  return cells.some((group) => {\n    return group.some((cell, index) => {\n      if (index === 0) {\n        return false;\n      }\n\n      if (cell.tile == null) {\n        return false;\n      }\n\n      const moveToCell = group[index - 1];\n\n      return moveToCell.canAccept(cell.tile);\n    });\n  });\n}\n\nfunction updateScore() {\n  scoreElement.textContent = score;\n}\n\nfunction resetGame() {\n  score = 0;\n\n  updateScore();\n\n  setupInput();\n}\n\nfunction clearBoard() {\n  grid.cells.forEach((cell) => {\n    if (cell.tile != null) {\n      cell.tile.remove();\n      cell.tile = null;\n    }\n  });\n}\n\nfunction startGame() {\n  resetGame();\n\n  startButton.classList.remove('button--start');\n  startButton.classList.add('button--restart');\n  startButton.textContent = '↻';\n\n  loseMessage.classList.add('message--hidden');\n  startMessage.classList.add('message--hidden');\n  winMessage.classList.add('message--hidden');\n\n  clearBoard();\n\n  grid.randomEmptyCell().tile = new Tile(gameBoard);\n  grid.randomEmptyCell().tile = new Tile(gameBoard);\n  gameWon = false;\n  setupInput();\n}\n\nfunction winGame() {\n  winMessage.classList.remove('message--hidden');\n\n  startButton.classList.remove('button--restart');\n  startButton.textContent = 'Start';\n\n  startButton.classList.add('button--start');\n\n  window.removeEventListener('keydown', handleInput);\n  gameWon = true;\n}\n\nfunction loseGame() {\n  loseMessage.classList.remove('message--hidden');\n  startButton.textContent = 'Restart';\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_class_call_check","instance","Constructor","TypeError","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","_create_class","protoProps","staticProps","prototype","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","toString","call","slice","constructor","name","test","_non_iterable_spread","score","scoreElement","document","getElementById","startMessage","loseMessage","winMessage","startButton","gameBoard","gameWon","Game","gridElement","style","setProperty","concat","_cells","createCellElements","cells","GRID_SIZE","cell","createElement","classList","add","push","append","map","cellElement","index","Cell","Math","floor","get","reduce","cellGrid","x","y","filter","tile","randomIndex","random","_emptyCells","_cellElement","_x","_y","_tile","set","_mergeTile","mergeTile","updateScore","remove","textContent","window","removeEventListener","handleInput","Tile","tileContainer","arguments","_tileElement","_value","v","animation","_this","addEventListener","once","setupInput","grid","forEach","randomEmptyCell","e","_handleInput","apply","fn","moveFunction","newTile","_ts_generator","thisArg","body","f","t","g","_","label","sent","trys","ops","next","verb","step","op","pop","_state","moveUp","moveDown","moveLeft","moveRight","mergeTiles","canMove","cellsByColumn","column","reverse","cellsByRow","row","waitForTransition","self","args","err","undefined","slideTiles","all","flatMap","group","promises","lastValidCell","j","moveToCell","canAccept","some"],"version":3,"file":"index.9e948371.js.map"}